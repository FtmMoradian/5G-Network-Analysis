# -*- coding: utf-8 -*-
"""5G Network Analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ca1Ryqsq8Ht225Sfqb3pSRiFDNo7Ugyt

Import Libraries
"""

import pandas as pd
import numpy as np
import warnings
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import warnings
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
warnings.filterwarnings('ignore')

"""Load DataSet"""

data = pd.read_csv('/content/drive/MyDrive/DataScienceProject/5G Time Series/Data Set/Quality of Service 5G.csv')

data.columns

"""Display DataSet"""

data.head()

"""Summary"""

data.describe().T

data.info()

data.isnull().sum()

data.size

data.shape

data['User_ID'].nunique()

"""Unique Values"""

data['Application_Type'].unique()

data['Application_Type'].nunique()

data['Signal_Strength'].unique()

data['Signal_Strength'].nunique()

data['Latency'].unique()

data['Latency'].nunique()

data['Resource_Allocation'].unique()

"""Regex Cleaning"""

data['Signal_Strength'] = data['Signal_Strength'].str.extract('(\d+)').astype(int)
data['Latency'] = data['Latency'].str.extract('(\d+)').astype(int)
data['Resource_Allocation'] = data['Resource_Allocation'].str.extract('(\d+)').astype(int)

data.head()

data[['Size','Unit']] = data.Required_Bandwidth.str.split(' ', expand=True)

data['Size'] = data.Size.astype(float)

data.Unit.replace({'Mbps':1024, 'Kbps':1}, inplace=True)

data.head()

data['Required_Bandwidth_Size_in_KB'] = data.Size * data.Unit

data.head(1)

data.drop(columns='Size',inplace=True)
data.drop(columns='Unit',inplace=True)

data.head(1)

"""Converting Allocated_Bandwidth Unit from Mbps to Kbps"""

data[['Size1','Unit1']] = data.Allocated_Bandwidth.str.split(' ', expand=True)

data['Size1'] = data.Size1.astype(float)

data.Unit1.replace({'Mbps':1024, 'Kbps':1}, inplace=True)

data['Allocated_Bandwidth_Size_in_KB'] = data.Size1 * data.Unit1

data.head(1)

data.drop(columns='Size1',inplace=True)
data.drop(columns='Unit1',inplace=True)

data.head(1)

data.drop(columns='Allocated_Bandwidth',inplace=True)
data.drop(columns='Required_Bandwidth',inplace=True)

data.head(1)

data.rename(columns = {'Required_Bandwidth_Size_in_KB':'Required_Bandwidth'},inplace=True)

data.rename(columns = {'Allocated_Bandwidth_Size_in_KB':'Allocated_Bandwidth'},inplace=True)

data.head(1)

""" Online Gaming with least avg bandwidth requirement"""

new_data_Online_Gaming = data[data['Application_Type']=='Online_Gaming']

sorted_Online_Gaming = new_data_Online_Gaming.sort_values(by='Required_Bandwidth')

sorted_Online_Gaming.tail(1)

data['Timestamp'].nunique()

"""User with high Required_Bandwidth User with high signal strength"""

data.Signal_Strength.max()

data.query("Signal_Strength == 123")

data.Required_Bandwidth.max()

data.query("Required_Bandwidth == 14848")

"""User with high Allocated_Bandwidth"""

data.Allocated_Bandwidth.max()

data.query("Allocated_Bandwidth == 16179.2")

"""User with high Latency"""

data.Latency.max()

data.query("Latency == 110")

""" Average of signal strength on diffrent application"""

app_signsl_strength = data.groupby(['Application_Type'])['Signal_Strength'].mean()

"""maximum average of signal strength on diffrent application"""

app_signsl_strength.nlargest()

"""Minimum average of signal strength on diffrent application"""

app_signsl_strength.nsmallest()

"""Average of latency on diffrent application"""

app_Latency = data.groupby(['Application_Type'])['Latency'].mean()

"""maximum average of latency on diffrent application"""

app_Latency.nlargest()

""" minimum average of latency on diffrent application"""

app_Latency.nsmallest()

data.groupby(['Application_Type'])['Latency'].mean()

"""Average of resource_Allocation on diffrent application"""

app_Resource_Allocation = data.groupby(['Application_Type'])['Resource_Allocation'].mean()

"""maximum average of latency on diffrent application"""

app_Resource_Allocation.nlargest()

"""minimum average of latency on diffrent application"""

app_Resource_Allocation.nsmallest()

"""Average of resource_Allocation on diffrent Timestamp"""

timestamp_Resource = data.groupby(['Timestamp'])['Resource_Allocation'].mean()

timestamp_Resource.nlargest()

timestamp_Resource.nsmallest()

timestamp_Latency = data.groupby(['Timestamp'])['Latency'].mean()

timestamp_Latency

""" **VISUALISATION**"""

plt.figure(figsize=(12, 6))
sns.boxplot(x='Application_Type', y='Latency', data=data)
plt.title('Latency by Application Type')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(x='Application_Type', y='Signal_Strength', data=data)
plt.title('Signal Strength by Application Type')
plt.xticks(rotation=45)
plt.show()

data_sorted = data.sort_values(by='Required_Bandwidth')

plt.figure(figsize=(16, 6))
sns.barplot(data=data_sorted, x= 'Application_Type', y = 'Required_Bandwidth')
plt.show()

sns.countplot(x=data['Resource_Allocation'])

plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Application_Type')
plt.title('Distribution of Application Types')
plt.xticks(rotation=45)
plt.xlabel('Application Type')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Resource_Allocation', bins=10 ,kde=True)
plt.title('Distribution of Resource Allocation')
plt.xlabel('Resource Allocation (%)')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(6,6))
plt.title('Resource_Allocation')
plt.xlabel('Range')
plt.ylabel('Count')
plt.xticks(rotation = 45)
plt.yticks(rotation = 45)
sns.histplot(data=data, x='Resource_Allocation')
plt.show()

app_name  =data.Application_Type.value_counts().index
lat_val = data.Latency.value_counts().values
plt.pie(lat_val[:7],labels = app_name[:7],autopct='%1.f%%');

data.head(1)

data.info()

data.Timestamp.unique()

ts1=data.query("Timestamp =='9/3/2023 10:00'")
ts1.head()

ts1pie = ts1.groupby(['Application_Type'])['Application_Type'].count().reset_index(name='type_count')
ts1pie

ts1pie.type_count

plt.figure(figsize=(12,8))
plt.pie(ts1pie.type_count.values,labels = ts1pie.Application_Type.values,autopct='%1.2f%%');

plt.figure(figsize=(10, 12))
sns.histplot(data=data, x='Signal_Strength', bins=20, kde=True)
plt.title('Distribution of Signal Strength')
plt.xlabel('Signal Strength')
plt.ylabel('Frequency')
plt.show()

application_counts = data['Application_Type'].value_counts()
application_counts

plt.figure(figsize=(10, 6))
sns.barplot(x=application_counts.index, y=application_counts.values, palette="viridis")
plt.title('Most Commonly Used Application Types')
plt.xlabel('Application Type')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(data=data, x='Signal_Strength', y='Allocated_Bandwidth',)
plt.title('Correlation Between Signal Strength and Allocated Bandwidth')
plt.xlabel('Signal Strength')
plt.ylabel('Allocated Bandwidth')
plt.grid(True)
plt.show()

correlation_coefficient = data['Signal_Strength'].corr(data['Allocated_Bandwidth'])
print(f"Correlation Coefficient: {correlation_coefficient}")

plt.figure(figsize=(8, 6))
sns.histplot(data=data, x='Resource_Allocation', bins=20, kde=True)
plt.title('Distribution of Resource Allocation Among Users')
plt.xlabel('Resource Allocation')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(data=data, x='Required_Bandwidth', y='Allocated_Bandwidth')
plt.title('Relationship Between Allocated Bandwidth and Required Bandwidth')
plt.xlabel('Required Bandwidth')
plt.ylabel('Allocated Bandwidth')
plt.grid(True)
plt.show()

